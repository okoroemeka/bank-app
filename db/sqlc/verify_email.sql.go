// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: verify_email.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO "verify_emails" (username,email,secret_code) VALUES($1,$2,$3) RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.Username, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, username, email, secret_code, is_used, created_at, expired_at FROM "verify_emails" WHERE "id"=$1
`

func (q *Queries) GetVerifyEmail(ctx context.Context, id int64) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmail, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE "verify_emails"
    SET
        "username" = coalesce($1, "username"),
        "email" = coalesce($2, "email"),
        "secret_code" = coalesce($3, "secret_code"),
        "is_used" = coalesce($4, "is_used")
    WHERE
        "id"=$5
    RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	Username   pgtype.Text `json:"username"`
	Email      pgtype.Text `json:"email"`
	SecretCode pgtype.Text `json:"secret_code"`
	IsUsed     pgtype.Bool `json:"is_used"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail,
		arg.Username,
		arg.Email,
		arg.SecretCode,
		arg.IsUsed,
		arg.ID,
	)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmailIsUsedField = `-- name: UpdateVerifyEmailIsUsedField :one
UPDATE "verify_emails"
    SET
        "is_used"=$1
    WHERE
        "id"=$2
    AND
        "secret_code"=$3
    AND
    "expired_at">now()
    AND NOT
        "is_used"
    RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailIsUsedFieldParams struct {
	IsUsed     bool   `json:"is_used"`
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdateVerifyEmailIsUsedField(ctx context.Context, arg UpdateVerifyEmailIsUsedFieldParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmailIsUsedField, arg.IsUsed, arg.ID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
